{"ast":null,"code":"import { EventEmitter } from 'fbemitter';\nimport Axios from 'axios';\nconst SERVER = 'http://localhost:3000';\n\nclass DBStore {\n  constructor() {\n    this.data = [];\n    this.axios = Axios.create();\n    this.emitter = new EventEmitter();\n  }\n\n  async getSongs() {\n    /* try{\r\n         const response = await fetch(\"/api/songs\");\r\n            if(response.status === 500) {\r\n             throw response;\r\n         }\r\n            this.data = await response.json();\r\n         this.emitter.emit(\"GET_SONGS_SUCCESS\");\r\n     } catch (error) {\r\n         console.warn(error)\r\n         this.emitter.emit(\"GET_SONGS_FAILED\");\r\n     }*/\n    this.axios.get(\"/api/songs\").then(response => {\n      this.data = response.data;\n      console.log(this.data);\n      this.emitter.emit(\"GET_SONGS_SUCCESS\");\n    }).catch(error => {\n      console.warn(error);\n      this.emitter.emit(\"GET_SONGS_FAILED\");\n    });\n  }\n\n  async addSong(song) {\n    try {\n      const response = await fetch(`/api/songs`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(song)\n      });\n\n      if (!response.ok) {\n        throw response;\n      }\n\n      this.getSongs();\n    } catch (err) {\n      console.warn(err);\n      this.emitter.emit('ADD_SONG_ERROR');\n    }\n  }\n\n}\n\nconst store = new DBStore();\nexport default store;","map":{"version":3,"sources":["C:/Users/USER/Desktop/modelProiectCareMergeCuHeroku-2/client/src/components/Playlists/DBstore.js"],"names":["EventEmitter","Axios","SERVER","DBStore","constructor","data","axios","create","emitter","getSongs","get","then","response","console","log","emit","catch","error","warn","addSong","song","fetch","method","headers","body","JSON","stringify","ok","err","store"],"mappings":"AAAA,SAASA,YAAT,QAA6B,WAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,MAAM,GAAG,uBAAf;;AAEA,MAAMC,OAAN,CAAc;AACVC,EAAAA,WAAW,GAAG;AACV,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,KAAL,GAAaL,KAAK,CAACM,MAAN,EAAb;AACA,SAAKC,OAAL,GAAe,IAAIR,YAAJ,EAAf;AACH;;AAEa,QAARS,QAAQ,GAAG;AACb;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKQ,SAAKH,KAAL,CAAWI,GAAX,CAAe,YAAf,EAA6BC,IAA7B,CAAmCC,QAAD,IAAc;AAC5C,WAAKP,IAAL,GAAYO,QAAQ,CAACP,IAArB;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,IAAjB;AACA,WAAKG,OAAL,CAAaO,IAAb,CAAkB,mBAAlB;AACH,KAJD,EAIGC,KAJH,CAIUC,KAAD,IAAW;AAChBJ,MAAAA,OAAO,CAACK,IAAR,CAAaD,KAAb;AACA,WAAKT,OAAL,CAAaO,IAAb,CAAkB,kBAAlB;AACH,KAPD;AAQH;;AAEY,QAAPI,OAAO,CAACC,IAAD,EAAO;AAChB,QAAI;AACA,YAAMR,QAAQ,GAAG,MAAMS,KAAK,CAAE,YAAF,EAAe;AACvCC,QAAAA,MAAM,EAAE,MAD+B;AAEvCC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAF8B;AAKvCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AALiC,OAAf,CAA5B;;AAOA,UAAI,CAACR,QAAQ,CAACe,EAAd,EAAkB;AACd,cAAMf,QAAN;AACH;;AACD,WAAKH,QAAL;AACH,KAZD,CAYE,OAAOmB,GAAP,EAAY;AACVf,MAAAA,OAAO,CAACK,IAAR,CAAaU,GAAb;AACA,WAAKpB,OAAL,CAAaO,IAAb,CAAkB,gBAAlB;AACH;AACJ;;AAlDS;;AAqDd,MAAMc,KAAK,GAAG,IAAI1B,OAAJ,EAAd;AAEA,eAAe0B,KAAf","sourcesContent":["import { EventEmitter } from 'fbemitter'\r\nimport Axios from 'axios'\r\n\r\nconst SERVER = 'http://localhost:3000'\r\n\r\nclass DBStore {\r\n    constructor() {\r\n        this.data = [];\r\n        this.axios = Axios.create();\r\n        this.emitter = new EventEmitter();\r\n    }\r\n\r\n    async getSongs() {\r\n        /* try{\r\n             const response = await fetch(\"/api/songs\");\r\n \r\n             if(response.status === 500) {\r\n                 throw response;\r\n             }\r\n \r\n             this.data = await response.json();\r\n             this.emitter.emit(\"GET_SONGS_SUCCESS\");\r\n         } catch (error) {\r\n             console.warn(error)\r\n             this.emitter.emit(\"GET_SONGS_FAILED\");\r\n         }*/\r\n\r\n\r\n        this.axios.get(\"/api/songs\").then((response) => {\r\n            this.data = response.data;\r\n            console.log(this.data)\r\n            this.emitter.emit(\"GET_SONGS_SUCCESS\");\r\n        }).catch((error) => {\r\n            console.warn(error)\r\n            this.emitter.emit(\"GET_SONGS_FAILED\");\r\n        })\r\n    }\r\n\r\n    async addSong(song) {\r\n        try {\r\n            const response = await fetch(`/api/songs`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(song)\r\n            })\r\n            if (!response.ok) {\r\n                throw response\r\n            }\r\n            this.getSongs()\r\n        } catch (err) {\r\n            console.warn(err)\r\n            this.emitter.emit('ADD_SONG_ERROR')\r\n        }\r\n    }\r\n}\r\n\r\nconst store = new DBStore();\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}