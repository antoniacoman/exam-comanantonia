{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\modelProiectCareMergeCuHeroku-2\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { StaticRouter } from 'react-router';\nimport { useEffect, useState } from 'react';\nimport DBstore from './components/Playlists/DBstore';\nimport Song from './components/Playlists/Song';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [ids, setIds] = useState([]);\n  useEffect(() => {\n    DBstore.getSongs();\n    DBstore.emitter.addListener('GET_SONGS_SUCCESS', () => {\n      setIds(DBstore.data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Exam\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"/3\",\n      children: \"3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: ids.map(song => {\n        let id = song.SongID;\n        return /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\" + id,\n          element: /*#__PURE__*/_jsxDEV(Song, {\n            member: song\n          }, song.SongID, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 52\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 20\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"EnfQASC+5WpWlxgwezrX3rKK9FY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/modelProiectCareMergeCuHeroku-2/client/src/App.js"],"names":["logo","BrowserRouter","Router","Routes","Route","StaticRouter","useEffect","useState","DBstore","Song","App","ids","setIds","getSongs","emitter","addListener","data","map","song","id","SongID"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,QAAuD,kBAAvD;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,gCAApB;AACA,OAAOC,IAAP,MAAiB,6BAAjB;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBL,QAAQ,CAAC,EAAD,CAA9B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,OAAO,CAACK,QAAR;AACAL,IAAAA,OAAO,CAACM,OAAR,CAAgBC,WAAhB,CAA4B,mBAA5B,EAAiD,MAAM;AACrDH,MAAAA,MAAM,CAACJ,OAAO,CAACQ,IAAT,CAAN;AACD,KAFD;AAGD,GALQ,EAKN,EALM,CAAT;AAOA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAG,MAAA,IAAI,EAAG,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAII,QAAC,MAAD;AAAA,gBACGL,GAAG,CAACM,GAAJ,CAASC,IAAD,IAAU;AACjB,YAAIC,EAAE,GAAGD,IAAI,CAACE,MAAd;AACA,4BAAO,QAAC,KAAD;AAAO,UAAA,IAAI,EAAE,MAAMD,EAAnB;AAAuB,UAAA,OAAO,eAAE,QAAC,IAAD;AAAwB,YAAA,MAAM,EAAED;AAAhC,aAAWA,IAAI,CAACE,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAhC;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAHA;AADH;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA,kBADF;AAeD;;GA1BQV,G;;KAAAA,G;AA4BT,eAAeA,GAAf","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom'\nimport { StaticRouter } from 'react-router'\nimport { useEffect, useState } from 'react';\nimport DBstore from './components/Playlists/DBstore'\nimport Song from './components/Playlists/Song';\n\nfunction App() {\n\n  const [ids, setIds] = useState([])\n\n  useEffect(() => {\n    DBstore.getSongs();\n    DBstore.emitter.addListener('GET_SONGS_SUCCESS', () => {\n      setIds(DBstore.data)\n    })\n  }, [])\n\n  return (\n    <>\n      <h1>Exam</h1>\n      <a href = \"/3\">3</a>\n      \n        <Routes>\n          {ids.map((song) => {\n            let id = song.SongID\n            return <Route path={\"/\" + id} element={<Song key={song.SongID} member={song} />} />\n          })}\n        </Routes>\n\n    </>\n  );\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}